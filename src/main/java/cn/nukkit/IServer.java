package cn.nukkit;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.*;

import cn.nukkit.command.*;
import cn.nukkit.entity.data.*;
import cn.nukkit.event.server.*;
import cn.nukkit.inventory.*;
import cn.nukkit.lang.*;
import cn.nukkit.level.*;
import cn.nukkit.metadata.*;
import cn.nukkit.nbt.tag.*;
import cn.nukkit.network.*;
import cn.nukkit.network.protocol.*;
import cn.nukkit.pack.*;
import cn.nukkit.permission.*;
import cn.nukkit.player.*;
import cn.nukkit.plugin.*;
import cn.nukkit.plugin.service.*;
import cn.nukkit.registry.*;
import cn.nukkit.scheduler.*;
import cn.nukkit.utils.*;
import io.netty.buffer.*;

public interface IServer {
    int broadcastMessage(String message);
    int broadcastMessage(TextContainer message);
    int broadcastMessage(String message, CommandSender[] recipients);
    int broadcastMessage(String message, Collection<? extends CommandSender> recipients);
    int broadcastMessage(TextContainer message, Collection<? extends CommandSender> recipients);
    int broadcast(String message, String permissions);
    int broadcast(TextContainer message, String permissions);
    void boot(IocContainer dependencies) throws IOException;
    void batchPackets(Player[] players, DataPacket[] packets);
    void batchPackets(Player[] players, DataPacket[] packets, boolean forceSync);
    void enablePlugins(PluginLoadOrder type);
    void enablePlugin(Plugin plugin);
    void disablePlugins();
    boolean dispatchCommand(CommandSender sender, String commandLine);
    ConsoleCommandSender getConsoleSender();
    void shutdown();
    void forceShutdown();
    void start();
    void handlePacket(InetSocketAddress address, ByteBuf payload);
    void tickProcessor();
    void onPlayerCompleteLoginSequence(Player player);
    void onPlayerLogin(Player player);
    void addPlayer(InetSocketAddress socketAddress, Player player);
    void addOnlinePlayer(Player player);
    void removeOnlinePlayer(Player player);
    void updatePlayerListData(UUID uuid, long entityId, String name, Skin skin);
    void updatePlayerListData(UUID uuid, long entityId, String name, Skin skin, String xboxUserId);
    void updatePlayerListData(UUID uuid, long entityId, String name, Skin skin, Player[] players);
    void updatePlayerListData(UUID uuid, long entityId, String name, Skin skin, String xboxUserId, Collection<Player> players);
    void removePlayerListData(UUID uuid);
    void removePlayerListData(UUID uuid, Player[] players);
    void removePlayerListData(UUID uuid, Collection<Player> players);
    void sendFullPlayerListData(Player player);
    void sendRecipeList(Player player);
    void doAutoSave();
    long getNextTick();
    void titleTick();
    QueryRegenerateEvent getQueryInformation();
    String getName();
    boolean isRunning();
    String getNukkitVersion();
    String getVersion();
    String getApiVersion();
    String getFilePath();
    String getDataPath();
    String getPluginPath();
    int getMaxPlayers();
    void setMaxPlayers(int maxPlayers);
    int getPort();
    int getViewDistance();
    String getIp();
    UUID getServerUniqueId();
    boolean getAutoSave();
    void setAutoSave(boolean autoSave);
    boolean getGenerateStructures();
    int getGamemode();
    boolean getForceGamemode();
    int getDifficulty();
    boolean hasWhitelist();
    int getSpawnRadius();
    boolean getAllowFlight();
    boolean isHardcore();
    int getDefaultGamemode();
    String getMotd();
    String getSubMotd();
    boolean getForceResources();
    EntityMetadataStore getEntityMetadata();
    PlayerMetadataStore getPlayerMetadata();
    LevelMetadataStore getLevelMetadata();
    PluginManager getPluginManager();
    CraftingManager getCraftingManager();
    PackManager getPackManager();
    ServerScheduler getScheduler();
    int getTick();
    float getTicksPerSecond();
    float getTicksPerSecondAverage();
    float getTickUsage();
    float getTickUsageAverage();
    SimpleCommandMap getCommandMap();
    Map<UUID, Player> getOnlinePlayers();
    void addRecipe(Recipe recipe);
    Optional<Player> getPlayer(UUID uuid);
    Optional<UUID> lookupName(String name);
    void updateName(UUID uuid, String name);
    IPlayer getOfflinePlayer(final String name);
    IPlayer getOfflinePlayer(UUID uuid);
    
    CompoundTag getOfflinePlayerData(UUID uuid);
    CompoundTag getOfflinePlayerData(UUID uuid, boolean create);
    CompoundTag getOfflinePlayerData(String name);
    CompoundTag getOfflinePlayerData(String name, boolean create);
    void saveOfflinePlayerData(UUID uuid, CompoundTag tag);
    void saveOfflinePlayerData(String name, CompoundTag tag);
    void saveOfflinePlayerData(UUID uuid, CompoundTag tag, boolean async);
    void saveOfflinePlayerData(String name, CompoundTag tag, boolean async);
    Player getPlayer(String name);
    Player getPlayerExact(String name);
    void removePlayer(Player player);
    Set<Level> getLevels();
    Level getDefaultLevel();
    void setDefaultLevel(Level level);
    boolean isLevelLoaded(String name);
    Level getLevel(String id);
    Level getLevelByName(String name);
    boolean unloadLevel(Level level);
    boolean unloadLevel(Level level, boolean forceUnload);
    LevelBuilder loadLevel();
    BaseLang getLanguage();
    boolean isLanguageForced();
    Network getNetwork();
    Config getConfig();
    Properties getProperties();
    String getProperty(String property);
    String getProperty(String property, String defaultValue);
    void setProperty(String property, String value);
    int getPropertyInt(String property);
    int getPropertyInt(String property, int defaultValue);
    void setPropertyInt(String property, int value);
    boolean getPropertyBoolean(String variable);
    boolean getPropertyBoolean(String property, boolean defaultValue);
    void setPropertyBoolean(String property, boolean value);
    PluginIdentifiableCommand getPluginCommand(String name);
    BanList getNameBans();
    BanList getIPBans();
    void addOp(String name);
    void removeOp(String name);
    void addWhitelist(String name);
    void removeWhitelist(String name);
    boolean isWhitelisted(String name);
    boolean isOp(String name);
    Config getWhitelist();
    Config getOps();
    void reloadWhitelist();
    ServiceManager getServiceManager();
    Map<String, List<String>> getCommandAliases();
    boolean shouldSavePlayerData();
    int getPlayerSkinChangeCooldown();
    Thread getPrimaryThread();
    boolean isNetherAllowed();
    PlayerDataSerializer getPlayerDataSerializer();
    void setPlayerDataSerializer(PlayerDataSerializer playerDataSerializer);
    LevelManager getLevelManager();
    LevelData getDefaultLevelData();
    Identifier getDefaultStorageId();
    StorageRegistry getStorageRegistry();
    GameRuleRegistry getGameRuleRegistry();
    BlockRegistry getBlockRegistry();
    ItemRegistry getItemRegistry();
    int getBaseTickRate();
    int getAutoTickRateLimit();
    boolean isAutoTickRate();
    boolean isIgnoredPacket(Class<? extends DataPacket> clazz);
}